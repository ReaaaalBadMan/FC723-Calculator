import tkinter as tk
import math
from backend import CalculatorBackend

class CalculatorApp:
    # A scientific calculator application with a graphical user interface.
    # Handles basic arithmetic operations and scientific functions.
    def __init__(self):
        # Initialize backend calculator logic
        self.backend = CalculatorBackend()
        
        # Initialize main window
        self.root = tk.Tk()
        self.root.title("Scientific Calculator")
        self.root.geometry("500x600")
        self.root.configure(bg='#E8E8E8')
        
        # Configure grid weights for responsive layout
        self.root.grid_rowconfigure(0, weight=1)    
        self.root.grid_rowconfigure(2, weight=1)    
        self.root.grid_columnconfigure(0, weight=1)
        self.root.grid_columnconfigure(2, weight=1)

        # Create main display frame
        display_frame = tk.Frame(self.root, bg='#E8E8E8')
        display_frame.grid(row=0, column=1, sticky='nsew', padx=5, pady=5)
        
        # Create display entry widget
        self.display = tk.Entry(display_frame, width=30, font=('Arial', 24), 
                              justify='right', bd=5, relief='sunken')
        self.display.grid(row=0, column=0, padx=5, pady=15)

        # Create button frame to hold all calculator buttons
        center_frame = tk.Frame(self.root, bg='#E8E8E8')
        center_frame.grid(row=1, column=1, padx=5, pady=5)
        
        # Define common button styles
        button_style = {
            'width': 10,
            'height': 2,
            'font': ('Arial', 12, 'bold'),
            'bd': 3,
            'relief': 'raised'
        }
        
        # Create specific styles for different button types
        op_style = dict(button_style, **{'bg': '#ADD8E6'})  # Light blue for operators
        num_style = dict(button_style, **{'bg': '#FFFFFF'})  # White for numbers
        sci_style = dict(button_style, **{'bg': '#FFE4B5'})  # Light orange for scientific functions
        
        # Create scientific operation buttons (top rows)
        scientific = [
            ('sin', 0, 0), ('cos', 0, 1), ('tan', 0, 2),
            ('sqrt', 1, 0), ('square', 1, 1), ('(', 1, 2), (')', 1, 3)
        ]
        # Loop through scientific functions and create buttons
        for func, row, col in scientific:
            btn = tk.Button(center_frame, text=func, 
                          command=lambda f=func: self.append_operation(f), **sci_style)
            btn.grid(row=row, column=col, padx=4, pady=3)
        
        # Create number buttons (middle rows) - digits 1-9
        for i in range(9):
            btn = tk.Button(center_frame, text=str(i+1), 
                          command=lambda x=i+1: self.append_number(x), **num_style)
            btn.grid(row=2+i//3, column=i%3, padx=4, pady=3)
            
        # Create 0 and decimal point buttons (bottom row)
        tk.Button(center_frame, text='0', 
                 command=lambda: self.append_number(0), **num_style).grid(row=5, column=1, padx=4, pady=3)
        tk.Button(center_frame, text='.', 
                 command=lambda: self.append_operation('.'), **num_style).grid(row=5, column=0, padx=4, pady=3)
        
        # Create arithmetic operation buttons (right column)
        operations = [('+', 2, 3), ('-', 3, 3), ('×', 4, 3), ('÷', 5, 3)]
        # Loop through operations and create buttons
        for op, row, col in operations:
            btn = tk.Button(center_frame, text=op, 
                          command=lambda x=op: self.append_operation(x), **op_style)
            btn.grid(row=row, column=col, padx=4, pady=3)
            
        # Create utility buttons (clear and equals)
        # Add clear button with light red background
        tk.Button(center_frame, text='C', command=self.clear, 
                 **dict(button_style, **{'bg': '#FF9999'})).grid(row=0, column=3, padx=4, pady=3)
        # Add equals button with light green background  
        tk.Button(center_frame, text='=', command=self.calculate, 
                 **dict(button_style, **{'bg': '#90EE90'})).grid(row=5, column=2, padx=4, pady=3)
        
    def append_number(self, number):
        # Append a number to the current expression and update display
        try:
            # Convert number to string and send to backend
            self.backend.input(str(number))
            # Clear current display
            self.display.delete(0, tk.END)
            # Show updated expression
            self.display.insert(0, self.backend.expression)
        except ValueError:
            pass

    def append_operation(self, op):
        # Append an operation or handle scientific functions
        try:
            # Convert display symbols to actual operators
            if op == '×':
                self.backend.input('*')
            elif op == '÷':
                self.backend.input('/')
            # Handle scientific functions
            elif op in ['sin', 'cos', 'tan', 'sqrt', 'square']:
                self.backend.scientific(op)
            else:
                self.backend.input(op)
            # Clear current display
            self.display.delete(0, tk.END)
            # Show updated expression
            self.display.insert(0, self.backend.expression)
        except ValueError:
            pass

    def clear(self):
        # Clear the display and reset the calculator
        # Reset backend state
        self.backend.clear()
        # Clear display widget
        self.display.delete(0, tk.END)

    def calculate(self):
        # Evaluate the expression and display the result
        # Get result from backend
        result = self.backend.calculate()
        # Clear current display
        self.display.delete(0, tk.END)
        # Show calculated result
        self.display.insert(0, str(result))

    def run(self):
        # Start the calculator application by entering the main event loop
        self.root.mainloop()

if __name__ == "__main__":
    # Create and run calculator instance when script is executed directly
    app = CalculatorApp()
    app.run()
